/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package senales;
import java.awt.Color;
import java.awt.Graphics;
import java.util.StringTokenizer;
import java.util.ArrayList;

public class Senales extends javax.swing.JFrame {

    int ra,a,b,vec[], ivec[];
    float fin1[], fin2[];
    
    public Senales() {
       
        initComponents();
        Resultado.setLineWrap(true);	
    }

      /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();
        Responde = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Gn = new javax.swing.JTextField();
        Hn = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Refleja = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        valorInt2 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        nText = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        valorInt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );

        jLabel11.setText("Su Gr치fica de h(n)");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel12.setText("Su Gr치fica de g(n)");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Operaciones B치sicas");

        Resultado.setEditable(false);
        Resultado.setBackground(new java.awt.Color(254, 254, 254));
        Resultado.setColumns(20);
        Resultado.setRows(5);
        Resultado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(Resultado);

        Responde.setEditable(false);
        Responde.setBackground(new java.awt.Color(254, 254, 254));
        Responde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RespondeActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Introduzca en esta secci칩n los datos correspondientes.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Carlito", 0, 12), new java.awt.Color(164, 164, 164))); // NOI18N

        jLabel1.setText("g(n) = ");

        jLabel2.setText("h(n)=");

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Graficar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel3.setText("Ingresa los elementos de la secuencia separados por ','");

        jLabel14.setText("por ejemplo:  5, 3, *6, 1, 0, 5");

        jLabel4.setText("y agrega un '*' antes del valor para indicar cua es el origen");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jButton6)
                                .addGap(29, 29, 29)
                                .addComponent(jButton5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Hn, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Gn, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel14)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones b치sicas.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Carlito", 0, 12))); // NOI18N

        jButton1.setText("Suma");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Resta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Amplificaci칩n");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Atenuaci칩n");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        Refleja.setText("Reflejar");
        Refleja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReflejaActionPerformed(evt);
            }
        });

        jButton10.setText("Desplazar");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        valorInt2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorInt2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Refleja, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valorInt2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Refleja)
                    .addComponent(jButton10)
                    .addComponent(valorInt2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Diezmaci칩n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Carlito", 0, 12))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Carlito", 0, 18)); // NOI18N
        jLabel8.setText("n=");

        jButton7.setText("Diezmaci칩n.");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(4, 4, 4)
                .addComponent(nText, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Interpolaci칩n"));

        jButton8.setText("Interpolar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cero", "Escalon", "Lineal" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Tipo");

        jLabel10.setText("n /");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valorInt, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valorInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jButton8))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(Responde))
                        .addGap(315, 315, 315))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(16, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(Responde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
      
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        String tamG[];
        String tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        String Gh[];
        String Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Gh2[]; //Aqui estaran guardados los valores del origen para atras
        String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        String total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        String total1a[];
        String total1[];// suma de los valores pero del orige pa atras
        
        String union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<String> lista = new ArrayList<String>();
        ArrayList<String> lista2 = new ArrayList<String>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
        String[] valida_origen_gn = gn.split(",");
        int cuenta_origen_gn = 0;
        int index_origen_gn = 0;
        for(int i = 0; i < valida_origen_gn.length; i++){
            if(valida_origen_gn[i].contains("*")){
                index_origen_gn = i;
                cuenta_origen_gn = cuenta_origen_gn + 1;
            }
        }
        String[] valida_origen_hn = hn.split(",");
        int cuenta_origen_hn = 0;
        int index_origen_hn = 0;
        for(int i = 0; i < valida_origen_hn.length; i++){
            if(valida_origen_hn[i].contains("*")){
                index_origen_hn = i;
                cuenta_origen_hn = cuenta_origen_hn + 1;
            }
        }    
        
        if(gn.equals("")||hn.equals("")||cuenta_origen_gn != 1||cuenta_origen_hn != 1){
            error.setVisible(true);
        } else{
                
       /*Estos nos sirven para definir el tama침o del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new String[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new String[cantH];
      
        if((cantG <= index_origen_gn-1) || (cantH <= index_origen_hn)){
           
        error.setVisible(true);
        } else{
               
        /*Separamos los datos de las comas y los guardamos en una lista*/
        for(String numero: gn.split(","))
            lista.add(numero.trim());
        
        for(String numero: hn.split(","))
            lista2.add(numero.trim());
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos*/
        Gh =  convierte.aMatriz(lista);
        Hh = convierte.aMatriz(lista2);
        ////////////////////////////////////////////////////////////////////     
        
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglo
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion*/
        
        Gh1 = define.origen(Gh, index_origen_gn);
        Hh1 = define.origen(Hh, index_origen_hn);
                
        Gh2 =define.origen_a(Gh, index_origen_gn);        
        Hh2 = define.origen_a(Hh, index_origen_hn);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
        /*total es el arreglo que contiene los valores desde el origen a los positivos
          total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
        :(*/
        total = calculando.sumaPosiciones(Gh1,Hh1);
        total1a = calculando.sumaPosiciones(Gh2,Hh2);
        /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
        acomodador :D*/
        total1 = define.acomodador(total1a); 
        
//        for(int i = 0;i<total.length;i++){
//          System.out.println("total Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
//        }
//          for(int pq = 0;pq<total1.length;pq++){
//          System.out.println("total1 Ahora tenemos el valor gracias a la suma: "+total1[pq]+ " en la posicion "+pq);
//          }
        
        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Responde.setText("La suma es: \n");
        Resultado.setText(null);
        union = new String[total.length+total1.length];
        //System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        //System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        //System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total1.length+total.length;
        int z=0;
        int y;
        
       
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
        for(x=0; x<total1.length; x++){
            union[x]=total1[x];
            //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
        }
        for(y=total1.length;y<j;y++){
            union[y]=total[z];
            //System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
            z++;
        }
          //Prueba de for para imprimir la union
//         for(int asd=0;asd<union.length;asd++){
//             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
//         }
         Resultado.append(""+union[0]);
         for(int pepe = 1;pepe<union.length;pepe++){
             Resultado.append(", "+union[pepe]);
         }         
        }
      }          
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
      
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        String tamG[];
        String tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        String Gh[];
        String Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Gh2[]; //Aqui estaran guardados los valores del origen para atras
        String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        String total[]; /*Aqui esta la resta de los valores pero del origen para adelante de la resta de Gh y Hh*/
        String total1a[];
        String total1[];// resta de los valores pero del orige pa atras
        
        String union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<String> lista = new ArrayList<String>();
        ArrayList<String> lista2 = new ArrayList<String>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
        String[] valida_origen_gn = gn.split(",");
        int cuenta_origen_gn = 0;
        int index_origen_gn = 0;
        for(int i = 0; i < valida_origen_gn.length; i++){
            if(valida_origen_gn[i].contains("*")){
                index_origen_gn = i;
                cuenta_origen_gn = cuenta_origen_gn + 1;
            }
        }
        String[] valida_origen_hn = hn.split(",");
        int cuenta_origen_hn = 0;
        int index_origen_hn = 0;
        for(int i = 0; i < valida_origen_hn.length; i++){
            if(valida_origen_hn[i].contains("*")){
                index_origen_hn = i;
                cuenta_origen_hn = cuenta_origen_hn + 1;
            }
        }       
        
        if(gn.equals("")||hn.equals("")||cuenta_origen_gn != 1||cuenta_origen_hn != 1){
            error.setVisible(true);
        } else{
          
       /*Estos nos sirven para definir el tama침o del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new String[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new String[cantH];
   
        if((cantG <= index_origen_gn-1) || (cantH <= index_origen_hn)){
           
        error.setVisible(true);
        } else{
               
        /*Separamos los datos de las comas y los guardamos en una lista*/
        for(String numero: gn.split(","))
            lista.add(numero.trim());
        
        for(String numero: hn.split(","))
            lista2.add(numero.trim());
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos*/
        Gh =  convierte.aMatriz(lista);
        Hh = convierte.aMatriz(lista2);
        ////////////////////////////////////////////////////////////////////
                
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglo
        a partir de nuestro origen y restaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se restara en otra seccion*/
        Gh1 = define.origen(Gh, index_origen_gn);
        Hh1 = define.origen(Hh, index_origen_hn);
        
        
        Gh2 =define.origen_a(Gh, index_origen_gn);
        Hh2 = define.origen_a(Hh, index_origen_hn);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se restaran y se guardaran en un arreglito :D*/
        /*total es el arreglo que contiene los valores desde el origen a los positivos
          total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
        :(*/
        total = calculando.restaPosiciones(Gh1,Hh1);
        total1a = calculando.restaPosiciones(Gh2,Hh2);
        /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
        acomodador :D*/
        total1 = define.acomodador(total1a); 
        
        /*y ahora imprimimos en nuestra cajita las restas*/
        Responde.setText("La resta es: \n");
        Resultado.setText(null);
        union = new String[total.length+total1.length];
        //System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        //System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        //System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total1.length + total.length;
        int z=0;
        int y;
        
       
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
        for(x=0; x<total1.length; x++){
            union[x]=total1[x];
            //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
        }
        for(y=total1.length;y<j;y++){
            union[y]=total[z];
            //System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
            z++;
        }
          //Prueba de for para imprimir la union
//         for(int asd=0;asd<union.length;asd++){
//             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
//         }
         Resultado.append(""+union[0]);
         for(int pepe = 1;pepe<union.length;pepe++){
             Resultado.append(", "+union[pepe]);
         }         
        }
      }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
      
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        String tamG[];
        String tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        String Gh[];
        String Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Gh2[]; //Aqui estaran guardados los valores del origen para atras
        String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        String total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        String total1a[];
        String total1[];// suma de los valores pero del orige pa atras
        String union[];
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<String> lista = new ArrayList<String>();
        ArrayList<String> lista2 = new ArrayList<String>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
        String[] valida_origen_gn = gn.split(",");
        int cuenta_origen_gn = 0;
        int index_origen_gn = 0;
        for(int i = 0; i < valida_origen_gn.length; i++){
            if(valida_origen_gn[i].contains("*")){
                index_origen_gn = i;
                cuenta_origen_gn = cuenta_origen_gn + 1;
            }
        }
        String[] valida_origen_hn = hn.split(",");
        int cuenta_origen_hn = 0;
        int index_origen_hn = 0;
        for(int i = 0; i < valida_origen_hn.length; i++){
            if(valida_origen_hn[i].contains("*")){
                index_origen_hn = i;
                cuenta_origen_hn = cuenta_origen_hn + 1;
            }
        }    
        
        if(gn.equals("")||hn.equals("")||cuenta_origen_gn != 1||cuenta_origen_hn != 1){
            error.setVisible(true);
        } else{                
            /*Estos nos sirven para definir el tama침o del arreglo*/
            int cantG = define.cant_var(gn);
            tamG = new String[cantG];

            int cantH = define.cant_var(hn);
            tamH = new String[cantH];

            if((cantG <= index_origen_gn-1) || (cantH <= index_origen_hn)){
                error.setVisible(true);
            } else{

                /*Separamos los datos de las comas y los guardamos en una lista*/
                for(String numero: gn.split(","))
                    lista.add(numero.trim());

                for(String numero: hn.split(","))
                    lista2.add(numero.trim());
                ///////////////////////////////////////////////////////////////////

                /*Guardamos las listas en arreglos*/
                Gh =  convierte.aMatriz(lista);
                Hh = convierte.aMatriz(lista2);
                ////////////////////////////////////////////////////////////////////     

                /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglo
                a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
                pues las definiremos despues y se sumaran en otra seccion*/

                Gh1 = define.origen(Gh, index_origen_gn);
                Hh1 = define.origen(Hh, index_origen_hn);

                Gh2 =define.origen_a(Gh, index_origen_gn);        
                Hh2 = define.origen_a(Hh, index_origen_hn);

                /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
                donde se sumaran y se guardaran en un arreglito :D*/
                /*total es el arreglo que contiene los valores desde el origen a los positivos
                  total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
                :(*/
                total = calculando.multiplicaPosiciones(Gh1,Hh1);
                total1a = calculando.multiplicaPosiciones(Gh2,Hh2);
                /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
                acomodador :D*/
                total1 = define.acomodador(total1a); 

        //        for(int i = 0;i<total.length;i++){
        //          System.out.println("total Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        //        }
        //          for(int pq = 0;pq<total1.length;pq++){
        //          System.out.println("total1 Ahora tenemos el valor gracias a la suma: "+total1[pq]+ " en la posicion "+pq);
        //          }

                /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
                Responde.setText("La amplificaci칩n es: \n");
                Resultado.setText(null);
                union = new String[total.length+total1.length];
                //System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
                //System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
                //System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
                int j=total1.length+total.length;
                int z=0;
                int y;

                /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
                arreglo llamado union*/
                for(x=0; x<total1.length; x++){
                    union[x]=total1[x];
                    //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                }
                for(y=total1.length;y<j;y++){
                    union[y]=total[z];
                    //System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                    z++;
                }
               //Prueba de for para imprimir la union
     //         for(int asd=0;asd<union.length;asd++){
     //             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
     //         }
                Resultado.append(""+union[0]);
                for(int pepe = 1;pepe<union.length;pepe++){
                    Resultado.append(", "+union[pepe]);
                }         
            }
        }          
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
      
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        String tamG[];
        String tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        String Gh[];
        String Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Gh2[]; //Aqui estaran guardados los valores del origen para atras
        String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        String total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        String total1a[];
        String total1[];// suma de los valores pero del orige pa atras
        String union[];
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<String> lista = new ArrayList<String>();
        ArrayList<String> lista2 = new ArrayList<String>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
        String[] valida_origen_gn = gn.split(",");
        int cuenta_origen_gn = 0;
        int index_origen_gn = 0;
        for(int i = 0; i < valida_origen_gn.length; i++){
            if(valida_origen_gn[i].contains("*")){
                index_origen_gn = i;
                cuenta_origen_gn = cuenta_origen_gn + 1;
            }
        }
        String[] valida_origen_hn = hn.split(",");
        int cuenta_origen_hn = 0;
        int index_origen_hn = 0;
        for(int i = 0; i < valida_origen_hn.length; i++){
            if(valida_origen_hn[i].contains("*")){
                index_origen_hn = i;
                cuenta_origen_hn = cuenta_origen_hn + 1;
            }
        }    
        
        if(gn.equals("")||hn.equals("")||cuenta_origen_gn != 1||cuenta_origen_hn != 1){
            error.setVisible(true);
        } else{                
            /*Estos nos sirven para definir el tama침o del arreglo*/
            int cantG = define.cant_var(gn);
            tamG = new String[cantG];

            int cantH = define.cant_var(hn);
            tamH = new String[cantH];

            if((cantG <= index_origen_gn-1) || (cantH <= index_origen_hn)){
                error.setVisible(true);
            } else{

                /*Separamos los datos de las comas y los guardamos en una lista*/
                for(String numero: gn.split(","))
                    lista.add(numero.trim());

                for(String numero: hn.split(","))
                    lista2.add(numero.trim());
                ///////////////////////////////////////////////////////////////////

                /*Guardamos las listas en arreglos*/
                Gh =  convierte.aMatriz(lista);
                Hh = convierte.aMatriz(lista2);
                ////////////////////////////////////////////////////////////////////     

                /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglo
                a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
                pues las definiremos despues y se sumaran en otra seccion*/

                Gh1 = define.origen(Gh, index_origen_gn);
                Hh1 = define.origen(Hh, index_origen_hn);

                Gh2 =define.origen_a(Gh, index_origen_gn);        
                Hh2 = define.origen_a(Hh, index_origen_hn);

                /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
                donde se sumaran y se guardaran en un arreglito :D*/
                /*total es el arreglo que contiene los valores desde el origen a los positivos
                  total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
                :(*/
                total = calculando.dividePosiciones(Gh1,Hh1);
                total1a = calculando.dividePosiciones(Gh2,Hh2);
                /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
                acomodador :D*/
                total1 = define.acomodador(total1a); 

        //        for(int i = 0;i<total.length;i++){
        //          System.out.println("total Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        //        }
        //          for(int pq = 0;pq<total1.length;pq++){
        //          System.out.println("total1 Ahora tenemos el valor gracias a la suma: "+total1[pq]+ " en la posicion "+pq);
        //          }

                /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
                Responde.setText("La atenuaci칩n es: \n");
                Resultado.setText(null);
                union = new String[total.length+total1.length];
                //System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
                //System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
                //System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
                int j=total1.length+total.length;
                int z=0;
                int y;

                /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
                arreglo llamado union*/
                for(x=0; x<total1.length; x++){
                    union[x]=total1[x];
                    //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                }
                for(y=total1.length;y<j;y++){
                    union[y]=total[z];
                    //System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                    z++;
                }
               //Prueba de for para imprimir la union
     //         for(int asd=0;asd<union.length;asd++){
     //             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
     //         }
                Resultado.append(""+union[0]);
                for(int pepe = 1;pepe<union.length;pepe++){
                    Resultado.append(", "+union[pepe]);
                }         
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        boolean bandera = false;
 
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        if(!gn.equals("")){
            /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
            String tamG[];
            /*Estas dos son sobre las que se haran los calculos*/
            String Gh[];
            /*Aqui estan las acomodadas*/
            String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
            String Gh2[]; //Aqui estaran guardados los valores del origen para atras
            String union[];
            int tamanioGad;
            int tamanioGat;
            /*Declaramos las listas donde se guardaran los datos*/
            ArrayList<String> lista = new ArrayList<String>();
            
            //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
            String[] valida_origen_gn = gn.split(",");
            int cuenta_origen_gn = 0;
            int index_origen_gn = 0;
            for(int i = 0; i < valida_origen_gn.length; i++){
                if(valida_origen_gn[i].contains("*")){
                    index_origen_gn = i;
                    cuenta_origen_gn = cuenta_origen_gn + 1;
                }
            }
            
            /*Definimos la caja de texto donde se multiplicara por n la convolucion*/
            String conV = nText.getText().toString();
            if(conV.equals(""))
                conV = "0";
            
            if(Integer.parseInt(conV) <= 0||conV.equals("")||cuenta_origen_gn != 1){
                error.setVisible(true);
            } else{           
                int conV1 = Integer.valueOf(conV);
                /*Estos nos sirven para definir el tama침o del arreglo*/
                int cantG = define.cant_var(gn);
                tamG = new String[cantG];                

                if((cantG <= index_origen_gn-1)){
                    error.setVisible(true);
                } else{
                    /*Separamos los datos de las comas y los guardamos en una lista*/
                    for(String numero: gn.split(","))
                        lista.add(numero.trim());
                    ///////////////////////////////////////////////////////////////////

                    /*Guardamos las listas en arreglos :D*/
                    Gh =  convierte.aMatriz(lista);

                    /*Separamos atras y adeltane*/
                    Gh1 = define.origen(Gh, index_origen_gn);
                    Gh2 =define.origen_a(Gh, index_origen_gn);                   

                    tamanioGad = Gh1.length;//del origen para adelante de G
                    tamanioGat = Gh2.length;//Del origen para atras de G                    

                    String []totala;
                    String []totala1;
                    String []totala2;

                    ////////////////////////////////////////////////////////////
                    totala = calculando.diezmaPosiciones_pos(Gh1,conV1,tamanioGad); //Los de adelante
                    totala1 = calculando.diezmaPosiciones_pat(Gh2, conV1, tamanioGat);
                    totala2 = define.invierte(totala1);
                    ///////////////////////////////////////////////////////

                    union = define.union(totala, totala2);

                    Responde.setText("La diezmaci칩n es: \n");
                    Resultado.setText(null);

                    Resultado.append(""+union[0]);
                    for(int pepe = 1;pepe<union.length;pepe++){
                       Resultado.append(", "+union[pepe]);
                    }
                    Resultado.append("\n\n");
                    bandera = true;
                }
            }
            
        }
      
        String hn = Hn.getText().toString(); 
        if(!hn.equals("")){
            String tamH[];        
            String Hh[];
            String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane        
            String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
            String union2[];
            int tamanioHad;
            int tamanioHat;
            ArrayList<String> lista2 = new ArrayList<String>();
            //////////////////////////////////////////
            
            String[] valida_origen_hn = hn.split(",");
            int cuenta_origen_hn = 0;
            int index_origen_hn = 0;
            for(int i = 0; i < valida_origen_hn.length; i++){
                if(valida_origen_hn[i].contains("*")){
                    index_origen_hn = i;
                    cuenta_origen_hn = cuenta_origen_hn + 1;
                }
            }
            /*Definimos la caja de texto donde se multiplicara por n la convolucion*/
            String conV = nText.getText().toString();
            if(conV.equals(""))
                conV = "0";
            
            if(Integer.parseInt(conV) <= 0|| conV.equals("")||cuenta_origen_hn != 1){
                error.setVisible(true);
            } else{           

                int conV1 = Integer.valueOf(conV);
                /*Estos nos sirven para definir el tama침o del arreglo*/

                int cantH = define.cant_var(hn);
                tamH = new String[cantH];

                if((cantH <= index_origen_hn)){
                    error.setVisible(true);
                } else{
                    /*Separamos los datos de las comas y los guardamos en una lista*/

                    for(String numero: hn.split(","))
                        lista2.add(numero.trim());
                    ///////////////////////////////////////////////////////////////////

                    /*Guardamos las listas en arreglos :D*/
                    Hh = convierte.aMatriz(lista2);

                    /*Separamos atras y adeltane*/
                    Hh1 = define.origen(Hh, index_origen_hn);
                    Hh2 = define.origen_a(Hh, index_origen_hn);

                    tamanioHad = Hh1.length;//Del origen para adelante de H
                    tamanioHat = Hh2.length;//Del origen pata artas de H

                    String []totalb;
                    String []totalb1;
                    String []totalb2;

                    ///////////////////////////////////////////////////////////
                    totalb = calculando.diezmaPosiciones_pos(Hh1,conV1, tamanioHad);
                    totalb1 = calculando.diezmaPosiciones_pat(Hh2, conV1, tamanioHat);
                    totalb2 = define.invierte(totalb1);
                    /////////////////////////////////////////////////////////////
                    union2 = define.union(totalb, totalb2);
                    
                    if(!bandera){
                        Responde.setText("La diezmaci칩n es: \n");
                        Resultado.setText(null);
                    }
                    Resultado.append(""+union2[0]);
                    for(int pepe = 1;pepe<union2.length;pepe++){
                        Resultado.append(", "+union2[pepe]);
                    }
                }
            }            
        }
        if(gn.equals("") && hn.equals("")){
            error.setVisible(true);
        }        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Interpolacion
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        boolean bandera = false;
 
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        if(!gn.equals("")){
            /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
            String tamG[];
            /*Estas dos son sobre las que se haran los calculos*/
            String Gh[];
            /*Aqui estan las acomodadas*/
            String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
            String Gh2[]; //Aqui estaran guardados los valores del origen para atras
            
            String GhI1[]; //Interpolado de G adelante
            String GhI2[]; //Interpolado de G atras
            
            String Gunion[]; //Interpolado de H adelante
            
            /*Declaramos las listas donde se guardaran los datos*/
            ArrayList<String> lista = new ArrayList<String>();
            
            //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
            String[] valida_origen_gn = gn.split(",");
            int cuenta_origen_gn = 0;
            int index_origen_gn = 0;
            for(int i = 0; i < valida_origen_gn.length; i++){
                if(valida_origen_gn[i].contains("*")){
                    index_origen_gn = i;
                    cuenta_origen_gn = cuenta_origen_gn + 1;
                }
            }
            
            //Obtengamos el valor de interpolacion
            String valor = valorInt.getText().toString();
            if(valor.equals(""))
                valor = "0";
            
            if(Integer.parseInt(valor) <= 0||valor.equals("")||cuenta_origen_gn != 1){
                error.setVisible(true);
            } else{           
                int valor_int = Integer.valueOf(valor);
                /*Estos nos sirven para definir el tama침o del arreglo*/
                int cantG = define.cant_var(gn);
                tamG = new String[cantG];                

                if((cantG <= index_origen_gn-1)){
                    error.setVisible(true);
                } else{
                    /*Separamos los datos de las comas y los guardamos en una lista*/
                    for(String numero: gn.split(","))
                        lista.add(numero.trim());
                    ///////////////////////////////////////////////////////////////////

                    /*Guardamos las listas en arreglos :D*/
                    Gh =  convierte.aMatriz(lista);

                    /*Separamos atras y adeltane*/
                    Gh1 = define.origen(Gh, index_origen_gn);
                    Gh2 =define.origen_a(Gh, index_origen_gn);                   
                    
                    //Obtengamos el tipo de interpolacion
                    int tipo=0;
                    String inTipo = jComboBox1.getSelectedItem().toString();

                    if(inTipo.equals("Cero"))
                        tipo = 0;
                    if(inTipo.equals("Escalon"))
                        tipo = 1;
                    if(inTipo.equals("Lineal"))
                        tipo = 2;
                    
                    Gh2 = define.acomodador(Gh2); 

                    /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
                    donde se sumaran y se guardaran en un arreglito :D*/
                    /*total es el arreglo que contiene los valores desde el origen a los positivos
                    total2 es el arreglo que contiene los valores desde el origen para atras :D*/
                    GhI1 = calculando.interpolaPosiciones(Gh1, tipo, valor_int, 0);
                    GhI2 = calculando.interpolaPosiciones(Gh2, tipo, valor_int, Float.parseFloat(Gh1[0].replace("*", "")));

                    //total2 = calculando.interpolaPosiciones(Gh2,Hh2,tipo,valor);
                    /*for(int i = 0;i<total.length;i++){
                        System.out.println("Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
                    }*/

                    Gunion = new String[GhI1.length+GhI2.length];

                    int j=GhI1.length+GhI2.length;
                    int z=0;
                    int y;
                    /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
                    arreglo llamado union*/
                    for(int x=0; x<GhI2.length; x++){
                        Gunion[x]=GhI2[x];
                        //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                        if(x==(GhI2.length-1)){
                            for(y=GhI2.length;y<j;y++){
                                Gunion[y]=GhI1[z];
                                //System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                                z++;
                            }
                        }
                    }
                    //Prueba de for para imprimir la union
                    Resultado.setText("");
                    Responde.setText("La interpolaci칩n es: \n");

                    Resultado.append(""+Gunion[0]);

                    for(int pepe = 1;pepe<Gunion.length;pepe++){
                        Resultado.append(", "+Gunion[pepe]);
                    }
                    Resultado.append("\n\n");
                    //----------------------------------------------------
                    bandera = true;
                }
            }            
        }
      
        String hn = Hn.getText().toString(); 
        if(!hn.equals("")){
            String tamH[];        
            String Hh[];
            String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane        
            String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
            String HhI1[]; //Interpolado de H adelante
            String HhI2[]; //Interpolado de H atras
            String Hunion[];

            ArrayList<String> lista2 = new ArrayList<String>();
            //////////////////////////////////////////
            
            String[] valida_origen_hn = hn.split(",");
            int cuenta_origen_hn = 0;
            int index_origen_hn = 0;
            for(int i = 0; i < valida_origen_hn.length; i++){
                if(valida_origen_hn[i].contains("*")){
                    index_origen_hn = i;
                    cuenta_origen_hn = cuenta_origen_hn + 1;
                }
            }
            
            //Obtengamos el valor de interpolacion
            String valor = valorInt.getText().toString();
            if(valor.equals(""))
                valor = "0";
            
            if(Integer.parseInt(valor) <= 0|| valor.equals("")||cuenta_origen_hn != 1){
                error.setVisible(true);
            } else{           

                int valor_int = Integer.valueOf(valor);
                /*Estos nos sirven para definir el tama침o del arreglo*/

                int cantH = define.cant_var(hn);
                tamH = new String[cantH];

                if((cantH <= index_origen_hn)){
                    error.setVisible(true);
                } else{
                    /*Separamos los datos de las comas y los guardamos en una lista*/
                    for(String numero: hn.split(","))
                        lista2.add(numero.trim());
                    ///////////////////////////////////////////////////////////////////

                    /*Guardamos las listas en arreglos :D*/
                    Hh = convierte.aMatriz(lista2);

                    /*Separamos atras y adeltane*/
                    Hh1 = define.origen(Hh, index_origen_hn);
                    Hh2 = define.origen_a(Hh, index_origen_hn);     
                    ///////////////////////////////////////////////////////////
                    
                    //Obtengamos el tipo de interpolacion
                    int tipo=0;
                    String inTipo = jComboBox1.getSelectedItem().toString();

                    if(inTipo.equals("Cero"))
                        tipo = 0;
                    if(inTipo.equals("Escalon"))
                        tipo = 1;
                    if(inTipo.equals("Lineal"))
                        tipo = 2;
                    
                    Hh2 = define.acomodador(Hh2); 
                    
                    HhI1 = calculando.interpolaPosiciones(Hh1, tipo, valor_int, 0);
                    HhI2 = calculando.interpolaPosiciones(Hh2, tipo, valor_int, Float.parseFloat(Hh1[0].replace("*", "")));
                    
                    Hunion = new String[HhI1.length+HhI2.length];
                    int j = HhI1.length+HhI2.length;
                    int z = 0;
                    int y;
                    /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
                    arreglo llamado union*/
                    for(int x=0; x<HhI2.length; x++){
                        Hunion[x]=HhI2[x];
                        //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                        if(x==(HhI2.length-1)){
                            for(y=HhI2.length;y<j;y++){
                                Hunion[y]=HhI1[z];
                            //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                                z++;
                            }
                        }
                    }
                    
                    if(!bandera){
                        Responde.setText("La interpolaci칩n es: \n");
                        Resultado.setText(null);
                    }                    
                    //Prueba de for para imprimir la union
                    Resultado.append(""+Hunion[0]);
                    for(int pepe = 1;pepe<Hunion.length;pepe++){
                        Resultado.append(", "+Hunion[pepe]);
                    }                    
                }
            }            
        }
        if(gn.equals("") && hn.equals("")){
            error.setVisible(true);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void RespondeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RespondeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RespondeActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        boolean bandera = false;
 
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        if(!gn.equals("")){
            /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
            String tamG[];
            /*Estas dos son sobre las que se haran los calculos*/
            String Gh[];
            /*Aqui estan las acomodadas*/
            String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
            String Gh2[]; //Aqui estaran guardados los valores del origen para atras
            String GhI1[]; //Interpolado de G adelante
            String GhI2[]; //Interpolado de G atras
            String Gunion[];
            
            /*Declaramos las listas donde se guardaran los datos*/
            ArrayList<String> lista = new ArrayList<String>();
            
            //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
            String[] valida_origen_gn = gn.split(",");
            int cuenta_origen_gn = 0;
            int index_origen_gn = 0;
            for(int i = 0; i < valida_origen_gn.length; i++){
                if(valida_origen_gn[i].contains("*")){
                    index_origen_gn = i;
                    cuenta_origen_gn = cuenta_origen_gn + 1;
                }
            }
            
            /*Definimos la caja de texto donde se multiplicara por n la convolucion*/
            String valor = valorInt2.getText().toString();
            if(valor.equals(""))
                valor = "0";
            
            if(Integer.parseInt(valor) == 0||valor.equals("")||cuenta_origen_gn != 1){
                error.setVisible(true);
            } else{           
                int valor_int = Integer.valueOf(valor);
                /*Estos nos sirven para definir el tama침o del arreglo*/
                int cantG = define.cant_var(gn);
                tamG = new String[cantG];                

                if((cantG <= index_origen_gn-1)){
                    error.setVisible(true);
                } else{
                    /*Separamos los datos de las comas y los guardamos en una lista*/
                    for(String numero: gn.split(","))
                        lista.add(numero.trim());
                    ///////////////////////////////////////////////////////////////////

                    /*Guardamos las listas en arreglos :D*/
                    Gh =  convierte.aMatriz(lista);

                    /*Separamos atras y adeltane*/
                    Gh1 = define.origen(Gh, index_origen_gn);
                    Gh2 =define.origen_a(Gh, index_origen_gn);                   
                    
                    /*total es el arreglo que contiene los valores desde el origen a los positivos
                    total2 es el arreglo que contiene los valores desde el origen para atras :D*/
                    if(valor_int < 0){
                        Gh1[0] = Gh1[0].replace("*", "");
                        GhI1 = calculando.desplazaPosicionesNega(Gh1, (0-valor_int));
                        GhI2 = new String[Gh2.length];
                        for(int x=0;x<Gh2.length;x++)
                            GhI2[x] = Gh2[x];
                    }
                    else{
                        GhI2 = calculando.desplazaPosiciones(Gh2, valor_int);
                        GhI2 = define.acomodador(GhI2);
                        Gh1[0] = Gh1[0].replace("*", "");
                        GhI1 = new String[Gh1.length];
                        for(int x=0;x<Gh1.length;x++)
                            GhI1[x] = Gh1[x];
                    }
                    Gunion = new String[GhI1.length+GhI2.length];

                    int j=GhI1.length+GhI2.length;
                    int z=0;
                    /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
                    arreglo llamado union*/
                    for(int x=0; x<GhI2.length; x++){
                        Gunion[x]=GhI2[x];
                        //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                        if(x==(GhI2.length-1)){
                            for(int y=GhI2.length;y<j;y++){
                                Gunion[y]=GhI1[z];
                          //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                                z++;
                            }
                        }
                    }
                    //Prueba de for para imprimir la union
                    Resultado.setText("");
                    Responde.setText("El desplazamiento es: \n");
                    Resultado.append(""+Gunion[0]);

                    for(int pepe = 1;pepe<Gunion.length;pepe++){
                        Resultado.append(", "+Gunion[pepe]);
                    }
                    Resultado.append("\n\n");
                    bandera = true;
                }
            }            
        }
      
        String hn = Hn.getText().toString(); 
        if(!hn.equals("")){
            String tamH[];        
            String Hh[];
            String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane        
            String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
            String HhI1[]; //Interpolado de H adelante
            String HhI2[]; //Interpolado de H atras
            String Hunion[];            
            
            ArrayList<String> lista2 = new ArrayList<String>();
            //////////////////////////////////////////
            
            String[] valida_origen_hn = hn.split(",");
            int cuenta_origen_hn = 0;
            int index_origen_hn = 0;
            for(int i = 0; i < valida_origen_hn.length; i++){
                if(valida_origen_hn[i].contains("*")){
                    index_origen_hn = i;
                    cuenta_origen_hn = cuenta_origen_hn + 1;
                }
            }
            /*Definimos la caja de texto donde se multiplicara por n la convolucion*/
            String valor = valorInt2.getText().toString();
            if(valor.equals(""))
                valor = "0";
            
            if(Integer.parseInt(valor) == 0|| valor.equals("")||cuenta_origen_hn != 1){
                error.setVisible(true);
            } else{           

                int valor_int = Integer.valueOf(valor);
                /*Estos nos sirven para definir el tama침o del arreglo*/

                int cantH = define.cant_var(hn);
                tamH = new String[cantH];

                if((cantH <= index_origen_hn)){
                    error.setVisible(true);
                } else{
                    /*Separamos los datos de las comas y los guardamos en una lista*/

                    for(String numero: hn.split(","))
                        lista2.add(numero.trim());
                    ///////////////////////////////////////////////////////////////////

                    /*Guardamos las listas en arreglos :D*/
                    Hh = convierte.aMatriz(lista2);

                    /*Separamos atras y adeltane*/
                    Hh1 = define.origen(Hh, index_origen_hn);
                    Hh2 = define.origen_a(Hh, index_origen_hn);

                    Hh2 = define.acomodador(Hh2);
                    
                    /*total es el arreglo que contiene los valores desde el origen a los positivos
                    total2 es el arreglo que contiene los valores desde el origen para atras :D*/
                    if(valor_int < 0){
                        Hh1[0] = Hh1[0].replace("*", "");
                        HhI1 = calculando.desplazaPosicionesNega(Hh1, (0-valor_int));
                  
                        HhI2 = new String[Hh2.length];
                        for(int x=0;x<Hh2.length;x++)
                            HhI2[x] = Hh2[x];
                    }
                    else{
                        HhI2 = calculando.desplazaPosiciones(Hh2, valor_int);
                        HhI2 = define.acomodador(HhI2);
                        Hh1[0] = Hh1[0].replace("*", "");

                        HhI1 = new String[Hh1.length];
                        for(int x=0;x<Hh1.length;x++)
                            HhI1[x] = Hh1[x];
                    }
                    
                    Hunion = new String[HhI1.length+HhI2.length];
                    int j = HhI1.length+HhI2.length;
                    int z = 0;
                    /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
                    arreglo llamado union*/
                    for(int x=0; x<HhI2.length; x++){
                        Hunion[x]=HhI2[x];
                        //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                        if(x==(HhI2.length-1)){
                            for(int y=HhI2.length;y<j;y++){
                                Hunion[y]=HhI1[z];
                                //System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                                z++;
                            }
                        }
                    }
                    
                    if(!bandera){
                        Responde.setText("El desplazamiento es: \n");
                        Resultado.setText(null);
                    }   
                    
                    //Prueba de for para imprimir la union
                    Resultado.append(""+Hunion[0]);
                    for(int pepe = 1;pepe<Hunion.length;pepe++){
                        Resultado.append(", "+Hunion[pepe]);
                    }                                     
                }
            }            
        }
        if(gn.equals("") && hn.equals("")){
            error.setVisible(true);
        }
        
//        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
//        String tamG[];
//        String tamH[];
//        /*Estas dos son sobre las que se haran los calculos*/
//        String Gh[];
//        String Hh[];
//        
//        int x;
//        int OrG2, OrH2;
//
//        /*Aqui estan las acomodadas*/
//        String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
//        String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
//        String Gh2[]; //Aqui estaran guardados los valores del origen para atras
//        String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
//        
//        String GhI1[]; //Interpolado de G adelante
//        String GhI2[]; //Interpolado de G atras
//        String HhI1[]; //Interpolado de H adelante
//        String HhI2[]; //Interpolado de H atras
//        
//        String Gunion[]; //Interpolado de H adelante
//        String Hunion[]; //Interpolado de H atras
//        ////////////////////////////////////////////
//
//        /*Declaramos las listas donde se guardaran los datos*/
//        ArrayList<String> lista = new ArrayList<String>();
//        ArrayList<String> lista2 = new ArrayList<String>();
//        //////////////////////////////////////////
//
//        /*Aqui guardamos las cajas de teto*/
//        String gn = Gn.getText().toString();
//        String hn = Hn.getText().toString();
//
//        //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
//        String[] valida_origen_gn = gn.split(",");
//        int cuenta_origen_gn = 0;
//        int index_origen_gn = 0;
//        for(int i = 0; i < valida_origen_gn.length; i++){
//            if(valida_origen_gn[i].contains("*")){
//                index_origen_gn = i;
//                cuenta_origen_gn = cuenta_origen_gn + 1;
//            }
//        }
//        String[] valida_origen_hn = hn.split(",");
//        int cuenta_origen_hn = 0;
//        int index_origen_hn = 0;
//        for(int i = 0; i < valida_origen_hn.length; i++){
//            if(valida_origen_hn[i].contains("*")){
//                index_origen_hn = i;
//                cuenta_origen_hn = cuenta_origen_hn + 1;
//            }
//        }    
//        
//        if(gn.equals("")||hn.equals("")||cuenta_origen_gn != 1||cuenta_origen_hn != 1){
//            error.setVisible(true);
//        } else{ 
//            /*Estos nos sirven para definir el tama침o del arreglo*/
//            int cantG = define.cant_var(gn);
//            tamG = new String[cantG];
//
//            int cantH = define.cant_var(hn);
//            tamH = new String[cantH];
//
//            if((cantG <= index_origen_gn-1) || (cantH <= index_origen_hn)){
//                error.setVisible(true);
//            } else{
//
//                /*Separamos los datos de las comas y los guardamos en una lista :D*/
//                for(String numero: gn.split(","))
//                    lista.add(numero.trim());
//
//                for(String numero: hn.split(","))
//                    lista2.add(numero.trim());
//            
//                /*Guardamos las listas en arreglos :D*/
//                Gh =  convierte.aMatriz(lista);
//                Hh = convierte.aMatriz(lista2);
//                ////////////////////////////////////////////////////////////////////
//
//                /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
//                a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
//                pues las definiremos despues y se sumaran en otra seccion :D*/
//                Gh1 = define.origen(Gh, index_origen_gn);
//                Hh1 = define.origen(Hh, index_origen_hn);
//
//                Gh2 = define.origen_a(Gh, index_origen_gn);
//                Hh2 = define.origen_a(Hh, index_origen_hn);
//
//                //Obtengamos el valor de desplazamiento
//                int valor = Integer.valueOf(valorInt2.getText().toString());
//
////                Gh2 = define.acomodador(Gh2); 
////                Hh2 = define.acomodador(Hh2); 
//
//            
//                /*total es el arreglo que contiene los valores desde el origen a los positivos
//                total2 es el arreglo que contiene los valores desde el origen para atras :D*/
//                if(valor < 0){
//                    Gh1[0] = Gh1[0].replace("*", "");
//                    GhI1 = calculando.desplazaPosicionesNega(Gh1, (0-valor));
//                    //HhI2 = calculando.desplazaPosicionesNega(Hh2, valor);
//                    GhI2 = new String[Gh2.length];
//                    for(x=0;x<Gh2.length;x++)
//                        GhI2[x] = Gh2[x];
////                    HhI1 = new String[Hh1.length];
////                    for(x=0;x<Hh1.length;x++)
////                        HhI1[x] = Hh1[x];
//                }
//                else{
//                    GhI2 = calculando.desplazaPosiciones(Gh2, valor);
//                    GhI2 = define.acomodador(GhI2);
//                    Gh1[0] = Gh1[0].replace("*", "");
//                    
//                    GhI1 = new String[Gh1.length];
//                    for(x=0;x<Gh1.length;x++)
//                        GhI1[x] = Gh1[x];
//                }
//                Gunion = new String[GhI1.length+GhI2.length];
//
//                int j=GhI1.length+GhI2.length;
//                int z=0;
//                int y;
//                /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
//                arreglo llamado union*/
//                for(x=0; x<GhI2.length; x++){
//                    Gunion[x]=GhI2[x];
//                    //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
//                    if(x==(GhI2.length-1)){
//                        for(y=GhI2.length;y<j;y++){
//                            Gunion[y]=GhI1[z];
//                      //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
//                            z++;
//                        }
//                    }
//                }
//                //Prueba de for para imprimir la union
//                Resultado.setText("");
//                Responde.setText("El desplazamiento es: \n");
//
//                Resultado.append(""+Gunion[0]);
//
//                for(int pepe = 1;pepe<Gunion.length;pepe++){
//                    Resultado.append(", "+Gunion[pepe]);
//                }
//                //----------------------------------------------------
//
////                 Hunion = new float[HhI1.length+HhI2.length];
////
////                j=HhI1.length+HhI2.length;
////                z=0;
////                /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
////                arreglo llamado union*/
////               for(x=0; x<HhI2.length; x++){
////                        Hunion[x]=HhI2[x];
////                        //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
////                        if(x==(HhI2.length-1)){
////                            for(y=HhI2.length;y<j;y++){
////                                Hunion[y]=HhI1[z];
////                          //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
////                                z++;
////                            }
////                        }
////                      }
////                  //Prueba de for para imprimir la union
////
////                 Resultado.append(""+Hunion[0]);
////
////                 for(int pepe = 1;pepe<Hunion.length;pepe++){
////                     Resultado.append(","+Hunion[pepe]);
////                 }
////
////                OrH2 = OrH + valor;
////                 if(OrH2 < 0)
////                     OrH2 = 0;
////
////                 Resultado.append("\nEl origen esta en "+OrH2+"\n");
//            }
//        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void ReflejaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReflejaActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        boolean bandera = false;
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();        
        if(!gn.equals("")){
            
            //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
            String[] valida_origen_gn = gn.split(",");
            int cuenta_origen_gn = 0;
            int index_origen_gn = 0;
            for(int i = 0; i < valida_origen_gn.length; i++){
                if(valida_origen_gn[i].contains("*")){
                    index_origen_gn = i;
                    cuenta_origen_gn = cuenta_origen_gn + 1;
                }
            }
            
            if(cuenta_origen_gn != 1){
                error.setVisible(true);
            } else{
                
                /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
                String tamG[];
                /*Estas dos son sobre las que se haran los calculos*/
                String Gh[];                                
                String total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/


                /*Declaramos las listas donde se guardaran los datos*/
                ArrayList<String> lista = new ArrayList<String>();
                
                /*Estos nos sirven para definir el tama침o del arreglo*/
                int cantG = define.cant_var(gn);
                tamG = new String[cantG];

                if((cantG <= index_origen_gn-1)){
                    error.setVisible(true);
                } else{

                    /*Separamos los datos de las comas y los guardamos en una lista*/
                    for(String numero: gn.split(","))
                        lista.add(numero.trim());

                    /*Guardamos las listas en arreglos*/
                    Gh =  convierte.aMatriz(lista);                                  

                    /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
                    donde se sumaran y se guardaran en un arreglito :D*/
                    /*total es el arreglo que contiene los valores desde el origen a los positivos
                      total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
                    :(*/
                    total = calculando.reflejaPos(Gh);

                    /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
                    Responde.setText("El reflejo es: \n");
                    Resultado.setText(null);
                    Resultado.append(""+total[0]);
                    for(int pepe = 1;pepe<total.length;pepe++){
                        Resultado.append(", "+total[pepe]);
                    }
                    Resultado.append("\n\n");
                    bandera = true;
                }
            } 
        }       
        
        String hn = Hn.getText().toString();        
        if(!hn.equals("")){
            
            String[] valida_origen_hn = hn.split(",");
            int cuenta_origen_hn = 0;
            int index_origen_hn = 0;
            for(int i = 0; i < valida_origen_hn.length; i++){
                if(valida_origen_hn[i].contains("*")){
                    index_origen_hn = i;
                    cuenta_origen_hn = cuenta_origen_hn + 1;
                }
            }
            
            if(cuenta_origen_hn != 1){
                error.setVisible(true);
            } else{                
                String tamH[];
                String Hh[]; 
                String total1[];
                ArrayList<String> lista2 = new ArrayList<String>();

                /*Estos nos sirven para definir el tama침o del arreglo*/
                int cantH = define.cant_var(hn);
                tamH = new String[cantH];

                if(cantH <= index_origen_hn){
                    error.setVisible(true);
                } else{

                    /*Separamos los datos de las comas y los guardamos en una lista*/
                    for(String numero: hn.split(","))
                        lista2.add(numero.trim());
                    
                    /*Guardamos las listas en arreglos*/                    
                    Hh = convierte.aMatriz(lista2);
                    
                    /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
                    donde se sumaran y se guardaran en un arreglito :D*/
                    /*total es el arreglo que contiene los valores desde el origen a los positivos
                      total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
                    :(*/
                    total1 = calculando.reflejaPos(Hh);

                    /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
                    if(!bandera){
                        Responde.setText("El reflejo es: \n");
                        Resultado.setText(null);
                    }                    
                    Resultado.append(""+total1[0]);
                    for(int pepe = 1;pepe<total1.length;pepe++){
                        Resultado.append(", "+total1[pepe]);
                    }
                }
            }           
        }        
        if(gn.equals("") && hn.equals("")){
            error.setVisible(true);
        }        
    }//GEN-LAST:event_ReflejaActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //Grafica
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        //Error error = new Error();
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        String tamG[];
        String tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        String Gh[];
        String Hh[];

        /*Aqui estan las acomodadas*/
        String Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        String Gh2[]; //Aqui estaran guardados los valores del origen para atras
        String Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        ////////////////////////////////////////////

        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<String> lista = new ArrayList<String>();
        ArrayList<String> lista2 = new ArrayList<String>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
        
        //validamos que ambas funciones tengan definido cual es el elemento de origen y que solo sea un solo origen
        String[] valida_origen_gn = gn.split(",");
        //int cuenta_origen_gn = 0;
        int index_origen_gn = 0;
        for(int i = 0; i < valida_origen_gn.length; i++){
            if(valida_origen_gn[i].contains("*")){
                index_origen_gn = i;
                //cuenta_origen_gn = cuenta_origen_gn + 1;
            }
        }
        String[] valida_origen_hn = hn.split(",");
        //int cuenta_origen_hn = 0;
        int index_origen_hn = 0;
        for(int i = 0; i < valida_origen_hn.length; i++){
            if(valida_origen_hn[i].contains("*")){
                index_origen_hn = i;
                //cuenta_origen_hn = cuenta_origen_hn + 1;
            }
        }        
//        if(gn.equals("")||hn.equals("")||cuenta_origen_gn != 1||cuenta_origen_hn != 1){
//            error.setVisible(true);
//        } else{

        /*Estos nos sirven para definir el tama침o del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new String[cantG];

        int cantH = define.cant_var(hn);
        tamH = new String[cantH];
        //////////////////////////////////////////////////////////////

        /*Separamos los datos de las comas y los guardamos en una lista :D*/
        for(String numero: gn.split(","))
            lista.add(numero.trim());

        for(String numero: hn.split(","))
            lista2.add(numero.trim());
        ///////////////////////////////////////////////////////////////////

        /*Guardamos las listas en arreglos :D*/
        Gh = convierte.aMatriz(lista);
        Hh = convierte.aMatriz(lista2);
        ////////////////////////////////////////////////////////////////////

        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
        Gh1 = define.origen(Gh, index_origen_gn);
        Hh1 = define.origen(Hh, index_origen_hn);

        Gh2 = define.origen_a(Gh, index_origen_gn);
        Hh2 = define.origen_a(Hh, index_origen_hn);

        //Gh2 = define.acomodador(Gh2);
        //Hh2 = define.acomodador(Hh2);
        
        if(gn.equals("")){
            Gh1 = new String[0];
            Gh2 = new String[0];
        }
        
        if(hn.equals("")){
            Hh1 = new String[0];
            Hh2 = new String[0];
        }
        GraficaA gra = new GraficaA(Gh1, Gh2, Hh1, Hh2);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Resultado.setText("");
        Responde.setText("");
        Gn.setText("");
        Hn.setText("");
        nText.setText("");
        valorInt2.setText("");
        valorInt.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void valorInt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorInt2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorInt2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Senales w = new Senales();  
                w.setLocationRelativeTo(null);
                w.setVisible(true);
            }
        });
    }
    
    private javax.swing.JPanel G;
    private javax.swing.JPanel H;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Gn;
    private javax.swing.JTextField Hn;
    private javax.swing.JButton Refleja;
    private javax.swing.JTextField Responde;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nText;
    private javax.swing.JTextField valorInt;
    private javax.swing.JTextField valorInt2;
    // End of variables declaration//GEN-END:variables
}

